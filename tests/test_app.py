import pytest

import test_utils as u
import SimEngine
import SimEngine.Mote.MoteDefines as d

APP_PERIODIC_CONFIG = {
    'name'            : 'AppPeriodic',
    'args': {
        'pkPeriod'    : 2,
        'pkPeriodVar' : 0,
        'pkLength'    : 90,
    }
}

APP_BURST_CONFIG = {
    'name'            : 'AppBurst',
    'args': {
        'pkScheduleAt': 1,
        'pkBurstNum'  : 5,
        'pkLength'    : 90,
    }
}

APPS = [
    [],
    [APP_PERIODIC_CONFIG],
    [APP_BURST_CONFIG],
    [APP_PERIODIC_CONFIG, APP_PERIODIC_CONFIG],
    [APP_BURST_CONFIG, APP_BURST_CONFIG],
    [APP_PERIODIC_CONFIG, APP_BURST_CONFIG]
]
@pytest.fixture(params=APPS)
def apps(request):
    return request.param


def test_app_upstream(
        sim_engine,
        apps
    ):
    """Test Application Upstream Traffic
    - objective   : test if apps generate packets as expected
    - precondition: form a 2-mote linear network
    - precondition: app generates 5 packets during the simualtion time
    - action      : run the simulation for 10 seconds
    - expectation : each application generates five packets
    """

    sim_engine = sim_engine(
        {
            'exec_numMotes'                            : 2,
            'exec_numSlotframesPerRun'                 : 11,
            'sf_type'                                  : 'SSFSymmetric',
            'conn_type'                                : 'linear',
            'tsch_probBcast_ebProb'                    : 0,
            'tsch_probBcast_dioProb'                   : 0,
            'apps'                                     : apps,
            "app_ack_by_root"                          : False
        },
        force_initial_routing_and_scheduling_state = True
    )

    # run the simulation for 1010 timeslots (10 seconds)
    u.run_until_asn(sim_engine, 1000)

    # the number of 'app_generated' is the same as the number of genereated
    # packets.
    logs = u.read_log_file(filter=['app_generated'])

    # five packets should be generated per application
    assert len(logs) == (len(apps) * 5)

def test_app_ack_by_root(sim_engine):
    """Test Application Acknowledgement by Root
    - objective   : test if root sends back appliaction ack
    - precondition: form a 2-mote linear network
    - precondition: root is configured to send application ack
    - action      : send an application packet to root
    - expectation : root generates an ack
    """

    sim_engine = sim_engine(
        {
            'exec_numMotes'                            : 2,
            'sf_type'                                  : 'SSFSymmetric',
            'conn_type'                                : 'linear',
            'tsch_probBcast_ebProb'                    : 0,
            'tsch_probBcast_dioProb'                   : 0,
            'apps'                                     : [
                {
                    'name'                             : 'AppBurst',
                    'args': {
                        'pkScheduleAt'                 : 1,
                        'pkBurstNum'                   : 1,
                        'pkLength'                     : 90
                    }
                }
            ],
            "app_ack_by_root"                          : True
        },
        force_initial_routing_and_scheduling_state = True
    )

    # run the simulation
    u.run_until_asn(sim_engine, 1000)

    # correct logs
    logs = u.read_log_file(
        filter=[
            'app_generated',
            'app_reaches_dagroot',
            'app_ack_generated'
        ]
    )

    # one packet should be generated by the mote (leaf)
    assert len([log for log in logs if log['type'] == 'app_generated']) == 1

    # root should receive one app packet
    assert len([log for log in logs if log['type'] == 'app_reaches_dagroot']) == 1

    # root should generate one ack packet
    assert len([log for log in logs if log['type'] == 'app_ack_generated']) == 1

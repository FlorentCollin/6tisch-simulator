#!/usr/bin/python
'''
\author Thomas Watteyne <watteyne@eecs.berkeley.edu>    
\author Xavier Vilajosana <xvilajosana@eecs.berkeley.edu>
\author Kazushi Muraoka <k-muraoka@eecs.berkeley.edu>
\author Nicola Accettura <nicola.accettura@eecs.berkeley.edu>
'''

#============================ adjust path =====================================

import os
import sys
if __name__=='__main__':
    here = sys.path[0]
    sys.path.insert(0, os.path.join(here, '..', '..'))

#============================ logging =========================================

import logging
class NullHandler(logging.Handler):
    def emit(self, record):
        pass
log = logging.getLogger('SimpleSim')
log.setLevel(logging.ERROR)
log.addHandler(NullHandler())

#============================ imports =========================================

import logging.config

from optparse      import OptionParser
from SimEngine     import SimEngine, \
                          SimSettings
from SimGui        import SimGui

#============================ defines =========================================

#============================ main ============================================

def parseCliOptions():
    
    parser = OptionParser()
    
    parser.add_option( '--squareSide',
        dest       = 'squareSide',
        type       = 'float',
        default    = 1.000, 
        help       = 'Length of the side of the square area the motes are deployed in, in km.',
    )
    
    parser.add_option( '--numMotes',
        dest       = 'numMotes',
        type       = 'int',
        default    = 10,
        help       = 'Number of simulated motes.',
    )
    
    parser.add_option( '--numChans',
        dest       = 'numChans',
        type       = 'int',
        default    = 16,
        help       = 'Number of frequency channels (between 1 and 16).',
    )
    
    parser.add_option( '--slotframeLength',
        dest       = 'slotframeLength',
        type       = 'int',
        default    = 101,
        help       = 'Number of timeslots in a slotframe.',
    )
    
    parser.add_option( '--pkPeriod',
        dest       = 'pkPeriod',
        type       = 'float',
        default    = 0.100,
        help       = 'Average period (is s) between two packets generated by a mote.',
    )
    
    parser.add_option( '--pkPeriodVar',
        dest       = 'pkPeriodVar',
        type       = 'float',
        default    = 0.1,
        help       = 'Variability of the traffic, in [0..1[ (use 0 for CBR).',
    )
    
    parser.add_option( '--otfThreshold',
        dest       = 'otfThreshold',
        type       = 'int',
        default    = 0, 
        help       = 'OTF threshhold, in cells.',
    )
    
    parser.add_option( '--numCyclesPerRun',
        dest       = 'numCyclesPerRun',
        type       = 'int',
        default    = 10, 
        help       = 'Duration of one simulation run, in slotframe cycle.',
    )
    
    parser.add_option( '--numRuns',
        dest       = 'numRuns',
        type       = 'int',
        default    = 3, 
        help       = 'Number of simulation runs.',
    )

    parser.add_option( '--slotDuration',
        dest       = 'slotDuration',
        type       = 'float',
        default    = 0.01, 
        help       = 'Duration of a TSCH timeslot, in seconds.',
    )
    
    parser.add_option( '--gui',
        dest       = 'gui',
        action     = 'store_true',
        default    = False, 
        help       = 'Display the GUI during execution.',
    )
    
    (opts, args)   = parser.parse_args()
    
    return opts.__dict__

def main():
    
    # initialize logging
    logging.config.fileConfig('logging.conf')
    
    # retrieve the command line kwargs and instantiate SimSettings
    settings       = SimSettings.SimSettings(**parseCliOptions())
    
    # start the GUI
    if settings.gui:
        gui        = SimGui.SimGui()
    
    # run the simulation runs
    for runNum in range(settings.numRuns):
        
        # logging
        print('run {0}, start'.format(runNum))
        
        # run a simulation for one run
        simengine  = SimEngine.SimEngine(runNum) # start simulation
        simengine.join()                         # wait until it's done
        simengine._instance      = None          # destroy the singleton
        simengine._init          = False
        
        # logging
        print('run {0}, end'.format(runNum))

if __name__=="__main__":
    main()
